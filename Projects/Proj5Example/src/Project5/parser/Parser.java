/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.parser;

import Project5.lexer.*;
import Project5.node.*;
import Project5.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProg */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AClassStmtsClassmethodstmts */
		    {
			ArrayList<Object> list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AEpsilonClassmethodstmts */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AClassDefClassmethodstmt */
		    {
			ArrayList<Object> list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AMethodDeclClassmethodstmt */
		    {
			ArrayList<Object> list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce AVarDeclClassmethodstmt */
		    {
			ArrayList<Object> list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AMethodStmtsMethodstmtseqs */
		    {
			ArrayList<Object> list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AEpsilonMethodstmtseqs */
		    {
			ArrayList<Object> list = new7();
			push(goTo(3), list);
		    }
		    break;
                    case 8: /* reduce AMethodDeclMethodstmtseq */
		    {
			ArrayList<Object> list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce AVarDeclMethodstmtseq */
		    {
			ArrayList<Object> list = new9();
			push(goTo(4), list);
		    }
		    break;
                    case 10: /* reduce AAssignEqualsMethodstmtseq */
		    {
			ArrayList<Object> list = new10();
			push(goTo(4), list);
		    }
		    break;
                    case 11: /* reduce AAssignStringMethodstmtseq */
		    {
			ArrayList<Object> list = new11();
			push(goTo(4), list);
		    }
		    break;
                    case 12: /* reduce APrintStmtMethodstmtseq */
		    {
			ArrayList<Object> list = new12();
			push(goTo(4), list);
		    }
		    break;
                    case 13: /* reduce AAssignReadInMethodstmtseq */
		    {
			ArrayList<Object> list = new13();
			push(goTo(4), list);
		    }
		    break;
                    case 14: /* reduce AAssignIncMethodstmtseq */
		    {
			ArrayList<Object> list = new14();
			push(goTo(4), list);
		    }
		    break;
                    case 15: /* reduce AAssignDecMethodstmtseq */
		    {
			ArrayList<Object> list = new15();
			push(goTo(4), list);
		    }
		    break;
                    case 16: /* reduce ADeclObjectMethodstmtseq */
		    {
			ArrayList<Object> list = new16();
			push(goTo(4), list);
		    }
		    break;
                    case 17: /* reduce AAssignBooleanMethodstmtseq */
		    {
			ArrayList<Object> list = new17();
			push(goTo(4), list);
		    }
		    break;
                    case 18: /* reduce AFirstStmtStmtseq */
		    {
			ArrayList<Object> list = new18();
			push(goTo(5), list);
		    }
		    break;
                    case 19: /* reduce AEpsilonStmtseq */
		    {
			ArrayList<Object> list = new19();
			push(goTo(5), list);
		    }
		    break;
                    case 20: /* reduce AAssignExprStmt */
		    {
			ArrayList<Object> list = new20();
			push(goTo(6), list);
		    }
		    break;
                    case 21: /* reduce AAssignStringStmt */
		    {
			ArrayList<Object> list = new21();
			push(goTo(6), list);
		    }
		    break;
                    case 22: /* reduce AVarDeclStmt */
		    {
			ArrayList<Object> list = new22();
			push(goTo(6), list);
		    }
		    break;
                    case 23: /* reduce AIfBlockStmt */
		    {
			ArrayList<Object> list = new23();
			push(goTo(6), list);
		    }
		    break;
                    case 24: /* reduce AIfElseBlockStmt */
		    {
			ArrayList<Object> list = new24();
			push(goTo(6), list);
		    }
		    break;
                    case 25: /* reduce AWhileStmt */
		    {
			ArrayList<Object> list = new25();
			push(goTo(6), list);
		    }
		    break;
                    case 26: /* reduce AFor$1Stmt */
		    {
			ArrayList<Object> list = new26();
			push(goTo(6), list);
		    }
		    break;
                    case 27: /* reduce AFor$Epsilon1Stmt */
		    {
			ArrayList<Object> list = new27();
			push(goTo(6), list);
		    }
		    break;
                    case 28: /* reduce AGetStmt */
		    {
			ArrayList<Object> list = new28();
			push(goTo(6), list);
		    }
		    break;
                    case 29: /* reduce APutStmt */
		    {
			ArrayList<Object> list = new29();
			push(goTo(6), list);
		    }
		    break;
                    case 30: /* reduce AIncrStmt */
		    {
			ArrayList<Object> list = new30();
			push(goTo(6), list);
		    }
		    break;
                    case 31: /* reduce ADecrStmt */
		    {
			ArrayList<Object> list = new31();
			push(goTo(6), list);
		    }
		    break;
                    case 32: /* reduce ADeclObjectStmt */
		    {
			ArrayList<Object> list = new32();
			push(goTo(6), list);
		    }
		    break;
                    case 33: /* reduce AMethodCallStmt */
		    {
			ArrayList<Object> list = new33();
			push(goTo(6), list);
		    }
		    break;
                    case 34: /* reduce AMethodCallInClassStmt */
		    {
			ArrayList<Object> list = new34();
			push(goTo(6), list);
		    }
		    break;
                    case 35: /* reduce AReturnStmt */
		    {
			ArrayList<Object> list = new35();
			push(goTo(6), list);
		    }
		    break;
                    case 36: /* reduce AAssignBooleanStmt */
		    {
			ArrayList<Object> list = new36();
			push(goTo(6), list);
		    }
		    break;
                    case 37: /* reduce ASwitchStmt */
		    {
			ArrayList<Object> list = new37();
			push(goTo(6), list);
		    }
		    break;
                    case 38: /* reduce AAnotherCaseCaseHelper */
		    {
			ArrayList<Object> list = new38();
			push(goTo(7), list);
		    }
		    break;
                    case 39: /* reduce AEpsilonCaseHelper */
		    {
			ArrayList<Object> list = new39();
			push(goTo(7), list);
		    }
		    break;
                    case 40: /* reduce ABreakBreakHelper */
		    {
			ArrayList<Object> list = new40();
			push(goTo(8), list);
		    }
		    break;
                    case 41: /* reduce AEpsilonBreakHelper */
		    {
			ArrayList<Object> list = new41();
			push(goTo(8), list);
		    }
		    break;
                    case 42: /* reduce AMethodCallMethodChainingOption */
		    {
			ArrayList<Object> list = new42();
			push(goTo(9), list);
		    }
		    break;
                    case 43: /* reduce AEpsilonMethodChainingOption */
		    {
			ArrayList<Object> list = new43();
			push(goTo(9), list);
		    }
		    break;
                    case 44: /* reduce AIncrForIncrStep */
		    {
			ArrayList<Object> list = new44();
			push(goTo(10), list);
		    }
		    break;
                    case 45: /* reduce ADecrForIncrStep */
		    {
			ArrayList<Object> list = new45();
			push(goTo(10), list);
		    }
		    break;
                    case 46: /* reduce AAssignmentForIncrStep */
		    {
			ArrayList<Object> list = new46();
			push(goTo(10), list);
		    }
		    break;
                    case 47: /* reduce AMoreIdsMoreIds */
		    {
			ArrayList<Object> list = new47();
			push(goTo(11), list);
		    }
		    break;
                    case 48: /* reduce AEpsilonMoreIds */
		    {
			ArrayList<Object> list = new48();
			push(goTo(11), list);
		    }
		    break;
                    case 49: /* reduce AMoreIdsVarlist */
		    {
			ArrayList<Object> list = new49();
			push(goTo(12), list);
		    }
		    break;
                    case 50: /* reduce AEpsilonVarlist */
		    {
			ArrayList<Object> list = new50();
			push(goTo(12), list);
		    }
		    break;
                    case 51: /* reduce AArrayArrayOption */
		    {
			ArrayList<Object> list = new51();
			push(goTo(13), list);
		    }
		    break;
                    case 52: /* reduce AEpsilonArrayOption */
		    {
			ArrayList<Object> list = new52();
			push(goTo(13), list);
		    }
		    break;
                    case 53: /* reduce AMoreIdsMoreVarlist */
		    {
			ArrayList<Object> list = new53();
			push(goTo(14), list);
		    }
		    break;
                    case 54: /* reduce AEpsilonMoreVarlist */
		    {
			ArrayList<Object> list = new54();
			push(goTo(14), list);
		    }
		    break;
                    case 55: /* reduce AVarListVarListTwo */
		    {
			ArrayList<Object> list = new55();
			push(goTo(15), list);
		    }
		    break;
                    case 56: /* reduce AEpsilonVarListTwo */
		    {
			ArrayList<Object> list = new56();
			push(goTo(15), list);
		    }
		    break;
                    case 57: /* reduce AExprOrBool */
		    {
			ArrayList<Object> list = new57();
			push(goTo(16), list);
		    }
		    break;
                    case 58: /* reduce ABoolExprOrBool */
		    {
			ArrayList<Object> list = new58();
			push(goTo(16), list);
		    }
		    break;
                    case 59: /* reduce AMoreVarListTwo */
		    {
			ArrayList<Object> list = new59();
			push(goTo(17), list);
		    }
		    break;
                    case 60: /* reduce AEpsilonMoreVarListTwo */
		    {
			ArrayList<Object> list = new60();
			push(goTo(17), list);
		    }
		    break;
                    case 61: /* reduce AAddExpr */
		    {
			ArrayList<Object> list = new61();
			push(goTo(18), list);
		    }
		    break;
                    case 62: /* reduce ATermExpr */
		    {
			ArrayList<Object> list = new62();
			push(goTo(18), list);
		    }
		    break;
                    case 63: /* reduce AMultTerm */
		    {
			ArrayList<Object> list = new63();
			push(goTo(19), list);
		    }
		    break;
                    case 64: /* reduce AFactorTerm */
		    {
			ArrayList<Object> list = new64();
			push(goTo(19), list);
		    }
		    break;
                    case 65: /* reduce AExprFactor */
		    {
			ArrayList<Object> list = new65();
			push(goTo(20), list);
		    }
		    break;
                    case 66: /* reduce ANegativeFactor */
		    {
			ArrayList<Object> list = new66();
			push(goTo(20), list);
		    }
		    break;
                    case 67: /* reduce AIntFactor */
		    {
			ArrayList<Object> list = new67();
			push(goTo(20), list);
		    }
		    break;
                    case 68: /* reduce ARealFactor */
		    {
			ArrayList<Object> list = new68();
			push(goTo(20), list);
		    }
		    break;
                    case 69: /* reduce AArrayFactor */
		    {
			ArrayList<Object> list = new69();
			push(goTo(20), list);
		    }
		    break;
                    case 70: /* reduce AIdvarlistFactor */
		    {
			ArrayList<Object> list = new70();
			push(goTo(20), list);
		    }
		    break;
                    case 71: /* reduce ALastFactor */
		    {
			ArrayList<Object> list = new71();
			push(goTo(20), list);
		    }
		    break;
                    case 72: /* reduce AArrayArrayOrId */
		    {
			ArrayList<Object> list = new72();
			push(goTo(21), list);
		    }
		    break;
                    case 73: /* reduce AIdArrayOrId */
		    {
			ArrayList<Object> list = new73();
			push(goTo(21), list);
		    }
		    break;
                    case 74: /* reduce ATrueBoolean */
		    {
			ArrayList<Object> list = new74();
			push(goTo(22), list);
		    }
		    break;
                    case 75: /* reduce AFalseBoolean */
		    {
			ArrayList<Object> list = new75();
			push(goTo(22), list);
		    }
		    break;
                    case 76: /* reduce AConditionalBoolean */
		    {
			ArrayList<Object> list = new76();
			push(goTo(22), list);
		    }
		    break;
                    case 77: /* reduce ABooleanBoolid */
		    {
			ArrayList<Object> list = new77();
			push(goTo(23), list);
		    }
		    break;
                    case 78: /* reduce AIdBoolid */
		    {
			ArrayList<Object> list = new78();
			push(goTo(23), list);
		    }
		    break;
                    case 79: /* reduce APlusAddop */
		    {
			ArrayList<Object> list = new79();
			push(goTo(24), list);
		    }
		    break;
                    case 80: /* reduce AMinusAddop */
		    {
			ArrayList<Object> list = new80();
			push(goTo(24), list);
		    }
		    break;
                    case 81: /* reduce ATypesType */
		    {
			ArrayList<Object> list = new81();
			push(goTo(25), list);
		    }
		    break;
                    case 82: /* reduce AIdType */
		    {
			ArrayList<Object> list = new82();
			push(goTo(25), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        TBegin tbeginNode2;
        PClassmethodstmts pclassmethodstmtsNode3;
        TEnd tendNode4;
        tbeginNode2 = (TBegin)nodeArrayList1.get(0);
        pclassmethodstmtsNode3 = (PClassmethodstmts)nodeArrayList2.get(0);
        tendNode4 = (TEnd)nodeArrayList3.get(0);

        pprogNode1 = new AProg(tbeginNode2, pclassmethodstmtsNode3, tendNode4);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AClassStmtsClassmethodstmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmts pclassmethodstmtsNode1;
        {
            // Block
        PClassmethodstmts pclassmethodstmtsNode2;
        PClassmethodstmt pclassmethodstmtNode3;
        pclassmethodstmtsNode2 = (PClassmethodstmts)nodeArrayList1.get(0);
        pclassmethodstmtNode3 = (PClassmethodstmt)nodeArrayList2.get(0);

        pclassmethodstmtsNode1 = new AClassStmtsClassmethodstmts(pclassmethodstmtsNode2, pclassmethodstmtNode3);
        }
	nodeList.add(pclassmethodstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEpsilonClassmethodstmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PClassmethodstmts pclassmethodstmtsNode1;
        {
            // Block

        pclassmethodstmtsNode1 = new AEpsilonClassmethodstmts();
        }
	nodeList.add(pclassmethodstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AClassDefClassmethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmt pclassmethodstmtNode1;
        {
            // Block
        TClassLit tclasslitNode2;
        TId tidNode3;
        TLcurly tlcurlyNode4;
        PMethodstmtseqs pmethodstmtseqsNode5;
        TRcurly trcurlyNode6;
        tclasslitNode2 = (TClassLit)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlcurlyNode4 = (TLcurly)nodeArrayList3.get(0);
        pmethodstmtseqsNode5 = (PMethodstmtseqs)nodeArrayList4.get(0);
        trcurlyNode6 = (TRcurly)nodeArrayList5.get(0);

        pclassmethodstmtNode1 = new AClassDefClassmethodstmt(tclasslitNode2, tidNode3, tlcurlyNode4, pmethodstmtseqsNode5, trcurlyNode6);
        }
	nodeList.add(pclassmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMethodDeclClassmethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmt pclassmethodstmtNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        PVarlist pvarlistNode5;
        TRparen trparenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pvarlistNode5 = (PVarlist)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);

        pclassmethodstmtNode1 = new AMethodDeclClassmethodstmt(ptypeNode2, tidNode3, tlparenNode4, pvarlistNode5, trparenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9);
        }
	nodeList.add(pclassmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVarDeclClassmethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmt pclassmethodstmtNode1;
        {
            // Block
        TId tidNode2;
        PMoreIds pmoreidsNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pmoreidsNode3 = (PMoreIds)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pclassmethodstmtNode1 = new AVarDeclClassmethodstmt(tidNode2, pmoreidsNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pclassmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMethodStmtsMethodstmtseqs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseqs pmethodstmtseqsNode1;
        {
            // Block
        PMethodstmtseqs pmethodstmtseqsNode2;
        PMethodstmtseq pmethodstmtseqNode3;
        pmethodstmtseqsNode2 = (PMethodstmtseqs)nodeArrayList1.get(0);
        pmethodstmtseqNode3 = (PMethodstmtseq)nodeArrayList2.get(0);

        pmethodstmtseqsNode1 = new AMethodStmtsMethodstmtseqs(pmethodstmtseqsNode2, pmethodstmtseqNode3);
        }
	nodeList.add(pmethodstmtseqsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEpsilonMethodstmtseqs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PMethodstmtseqs pmethodstmtseqsNode1;
        {
            // Block

        pmethodstmtseqsNode1 = new AEpsilonMethodstmtseqs();
        }
	nodeList.add(pmethodstmtseqsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMethodDeclMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        PVarlist pvarlistNode5;
        TRparen trparenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pvarlistNode5 = (PVarlist)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);

        pmethodstmtseqNode1 = new AMethodDeclMethodstmtseq(ptypeNode2, tidNode3, tlparenNode4, pvarlistNode5, trparenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVarDeclMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PMoreIds pmoreidsNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pmoreidsNode3 = (PMoreIds)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodstmtseqNode1 = new AVarDeclMethodstmtseq(tidNode2, pmoreidsNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAssignEqualsMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodstmtseqNode1 = new AAssignEqualsMethodstmtseq(tidNode2, parrayoptionNode3, tequalsNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAssignStringMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        TAnychars tanycharsNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        tanycharsNode5 = (TAnychars)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodstmtseqNode1 = new AAssignStringMethodstmtseq(tidNode2, parrayoptionNode3, tequalsNode4, tanycharsNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce APrintStmtMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TPut tputNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        PArrayOption parrayoptionNode5;
        TRparen trparenNode6;
        TSemicolon tsemicolonNode7;
        tputNode2 = (TPut)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        parrayoptionNode5 = (PArrayOption)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pmethodstmtseqNode1 = new APrintStmtMethodstmtseq(tputNode2, tlparenNode3, tidNode4, parrayoptionNode5, trparenNode6, tsemicolonNode7);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAssignReadInMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        TGet tgetNode5;
        TLparen tlparenNode6;
        TRparen trparenNode7;
        TSemicolon tsemicolonNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        tgetNode5 = (TGet)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList7.get(0);

        pmethodstmtseqNode1 = new AAssignReadInMethodstmtseq(tidNode2, parrayoptionNode3, tequalsNode4, tgetNode5, tlparenNode6, trparenNode7, tsemicolonNode8);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAssignIncMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TIncr tincrNode4;
        TSemicolon tsemicolonNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tincrNode4 = (TIncr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pmethodstmtseqNode1 = new AAssignIncMethodstmtseq(tidNode2, parrayoptionNode3, tincrNode4, tsemicolonNode5);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAssignDecMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TDecr tdecrNode4;
        TSemicolon tsemicolonNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tdecrNode4 = (TDecr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pmethodstmtseqNode1 = new AAssignDecMethodstmtseq(tidNode2, parrayoptionNode3, tdecrNode4, tsemicolonNode5);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ADeclObjectMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        TNew tnewNode5;
        TId tidNode6;
        TLparen tlparenNode7;
        TRparen trparenNode8;
        TSemicolon tsemicolonNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        tnewNode5 = (TNew)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        tlparenNode7 = (TLparen)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList8.get(0);

        pmethodstmtseqNode1 = new ADeclObjectMethodstmtseq(tidNode2, parrayoptionNode3, tequalsNode4, tnewNode5, tidNode6, tlparenNode7, trparenNode8, tsemicolonNode9);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAssignBooleanMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        PBoolean pbooleanNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pbooleanNode5 = (PBoolean)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodstmtseqNode1 = new AAssignBooleanMethodstmtseq(tidNode2, parrayoptionNode3, tequalsNode4, pbooleanNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AFirstStmtStmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtseq pstmtseqNode1;
        {
            // Block
        PStmt pstmtNode2;
        PStmtseq pstmtseqNode3;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtseqNode3 = (PStmtseq)nodeArrayList2.get(0);

        pstmtseqNode1 = new AFirstStmtStmtseq(pstmtNode2, pstmtseqNode3);
        }
	nodeList.add(pstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AEpsilonStmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmtseq pstmtseqNode1;
        {
            // Block

        pstmtseqNode1 = new AEpsilonStmtseq();
        }
	nodeList.add(pstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAssignExprStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignExprStmt(tidNode2, parrayoptionNode3, tequalsNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAssignStringStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        TAnychars tanycharsNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        tanycharsNode5 = (TAnychars)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignStringStmt(tidNode2, parrayoptionNode3, tequalsNode4, tanycharsNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AVarDeclStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PMoreIds pmoreidsNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        PArrayOption parrayoptionNode6;
        TSemicolon tsemicolonNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pmoreidsNode3 = (PMoreIds)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        parrayoptionNode6 = (PArrayOption)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pstmtNode1 = new AVarDeclStmt(tidNode2, pmoreidsNode3, tcolonNode4, ptypeNode5, parrayoptionNode6, tsemicolonNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIfBlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PBoolid pboolidNode4;
        TRparen trparenNode5;
        TThen tthenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pboolidNode4 = (PBoolid)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);

        pstmtNode1 = new AIfBlockStmt(tifNode2, tlparenNode3, pboolidNode4, trparenNode5, tthenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIfElseBlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PBoolid pboolidNode4;
        TRparen trparenNode5;
        TThen tthenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        TElse telseNode10;
        TLcurly tlcurlyNode11;
        PStmtseq pstmtseqNode12;
        TRcurly trcurlyNode13;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pboolidNode4 = (PBoolid)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);
        telseNode10 = (TElse)nodeArrayList9.get(0);
        tlcurlyNode11 = (TLcurly)nodeArrayList10.get(0);
        pstmtseqNode12 = (PStmtseq)nodeArrayList11.get(0);
        trcurlyNode13 = (TRcurly)nodeArrayList12.get(0);

        pstmtNode1 = new AIfElseBlockStmt(tifNode2, tlparenNode3, pboolidNode4, trparenNode5, tthenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9, telseNode10, tlcurlyNode11, pstmtseqNode12, trcurlyNode13);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        TLparen tlparenNode3;
        PBoolean pbooleanNode4;
        TRparen trparenNode5;
        TLcurly tlcurlyNode6;
        PStmtseq pstmtseqNode7;
        TRcurly trcurlyNode8;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pbooleanNode4 = (PBoolean)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tlcurlyNode6 = (TLcurly)nodeArrayList5.get(0);
        pstmtseqNode7 = (PStmtseq)nodeArrayList6.get(0);
        trcurlyNode8 = (TRcurly)nodeArrayList7.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, tlparenNode3, pbooleanNode4, trparenNode5, tlcurlyNode6, pstmtseqNode7, trcurlyNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFor$1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TFor tforNode2;
        TLparen tlparenNode3;
        PForOptionalType pforoptionaltypeNode4;
        TId tidNode6;
        TEquals tequalsNode7;
        PExpr pexprNode8;
        TSemicolon tsemicolonNode9;
        PBoolean pbooleanNode10;
        TSemicolon tsemicolonNode11;
        PForIncrStep pforincrstepNode12;
        TRparen trparenNode13;
        TLcurly tlcurlyNode14;
        PStmtseq pstmtseqNode15;
        TRcurly trcurlyNode16;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        {
            // Block
        PType ptypeNode5;
        ptypeNode5 = (PType)nodeArrayList3.get(0);

        pforoptionaltypeNode4 = new AForOptionalType(ptypeNode5);
        }
        tidNode6 = (TId)nodeArrayList4.get(0);
        tequalsNode7 = (TEquals)nodeArrayList5.get(0);
        pexprNode8 = (PExpr)nodeArrayList6.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList7.get(0);
        pbooleanNode10 = (PBoolean)nodeArrayList8.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList9.get(0);
        pforincrstepNode12 = (PForIncrStep)nodeArrayList10.get(0);
        trparenNode13 = (TRparen)nodeArrayList11.get(0);
        tlcurlyNode14 = (TLcurly)nodeArrayList12.get(0);
        pstmtseqNode15 = (PStmtseq)nodeArrayList13.get(0);
        trcurlyNode16 = (TRcurly)nodeArrayList14.get(0);

        pstmtNode1 = new AForStmt(tforNode2, tlparenNode3, pforoptionaltypeNode4, tidNode6, tequalsNode7, pexprNode8, tsemicolonNode9, pbooleanNode10, tsemicolonNode11, pforincrstepNode12, trparenNode13, tlcurlyNode14, pstmtseqNode15, trcurlyNode16);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFor$Epsilon1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TFor tforNode2;
        TLparen tlparenNode3;
        PForOptionalType pforoptionaltypeNode4;
        TId tidNode5;
        TEquals tequalsNode6;
        PExpr pexprNode7;
        TSemicolon tsemicolonNode8;
        PBoolean pbooleanNode9;
        TSemicolon tsemicolonNode10;
        PForIncrStep pforincrstepNode11;
        TRparen trparenNode12;
        TLcurly tlcurlyNode13;
        PStmtseq pstmtseqNode14;
        TRcurly trcurlyNode15;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        {
            // Block

        pforoptionaltypeNode4 = new AEpsilonForOptionalType();
        }
        tidNode5 = (TId)nodeArrayList3.get(0);
        tequalsNode6 = (TEquals)nodeArrayList4.get(0);
        pexprNode7 = (PExpr)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);
        pbooleanNode9 = (PBoolean)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);
        pforincrstepNode11 = (PForIncrStep)nodeArrayList9.get(0);
        trparenNode12 = (TRparen)nodeArrayList10.get(0);
        tlcurlyNode13 = (TLcurly)nodeArrayList11.get(0);
        pstmtseqNode14 = (PStmtseq)nodeArrayList12.get(0);
        trcurlyNode15 = (TRcurly)nodeArrayList13.get(0);

        pstmtNode1 = new AForStmt(tforNode2, tlparenNode3, pforoptionaltypeNode4, tidNode5, tequalsNode6, pexprNode7, tsemicolonNode8, pbooleanNode9, tsemicolonNode10, pforincrstepNode11, trparenNode12, tlcurlyNode13, pstmtseqNode14, trcurlyNode15);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AGetStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        TGet tgetNode5;
        TLparen tlparenNode6;
        TRparen trparenNode7;
        TSemicolon tsemicolonNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        tgetNode5 = (TGet)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList7.get(0);

        pstmtNode1 = new AGetStmt(tidNode2, parrayoptionNode3, tequalsNode4, tgetNode5, tlparenNode6, trparenNode7, tsemicolonNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce APutStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TPut tputNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        PArrayOption parrayoptionNode5;
        TRparen trparenNode6;
        TSemicolon tsemicolonNode7;
        tputNode2 = (TPut)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        parrayoptionNode5 = (PArrayOption)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pstmtNode1 = new APutStmt(tputNode2, tlparenNode3, tidNode4, parrayoptionNode5, trparenNode6, tsemicolonNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIncrStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TIncr tincrNode4;
        TSemicolon tsemicolonNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tincrNode4 = (TIncr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new AIncrStmt(tidNode2, parrayoptionNode3, tincrNode4, tsemicolonNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ADecrStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TDecr tdecrNode4;
        TSemicolon tsemicolonNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tdecrNode4 = (TDecr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new ADecrStmt(tidNode2, parrayoptionNode3, tdecrNode4, tsemicolonNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ADeclObjectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        TNew tnewNode5;
        TId tidNode6;
        TLparen tlparenNode7;
        TRparen trparenNode8;
        TSemicolon tsemicolonNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        tnewNode5 = (TNew)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        tlparenNode7 = (TLparen)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList8.get(0);

        pstmtNode1 = new ADeclObjectStmt(tidNode2, parrayoptionNode3, tequalsNode4, tnewNode5, tidNode6, tlparenNode7, trparenNode8, tsemicolonNode9);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMethodCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TLparen tlparenNode3;
        PVarListTwo pvarlisttwoNode4;
        TRparen trparenNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pvarlisttwoNode4 = (PVarListTwo)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AMethodCallStmt(tidNode2, tlparenNode3, pvarlisttwoNode4, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMethodCallInClassStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TPeriod tperiodNode4;
        TId tidNode5;
        TLparen tlparenNode6;
        PVarListTwo pvarlisttwoNode7;
        TRparen trparenNode8;
        PMethodChainingOption pmethodchainingoptionNode9;
        TSemicolon tsemicolonNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tperiodNode4 = (TPeriod)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        pvarlisttwoNode7 = (PVarListTwo)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        pmethodchainingoptionNode9 = (PMethodChainingOption)nodeArrayList8.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList9.get(0);

        pstmtNode1 = new AMethodCallInClassStmt(tidNode2, parrayoptionNode3, tperiodNode4, tidNode5, tlparenNode6, pvarlisttwoNode7, trparenNode8, pmethodchainingoptionNode9, tsemicolonNode10);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstmtNode1 = new AReturnStmt(treturnNode2, pexprNode3, tsemicolonNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAssignBooleanStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PArrayOption parrayoptionNode3;
        TEquals tequalsNode4;
        PBoolean pbooleanNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayoptionNode3 = (PArrayOption)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pbooleanNode5 = (PBoolean)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignBooleanStmt(tidNode2, parrayoptionNode3, tequalsNode4, pbooleanNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ASwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSwitch tswitchNode2;
        TLparen tlparenNode3;
        PExpr pexprNode4;
        TRparen trparenNode5;
        TLcurly tlcurlyNode6;
        TCase tcaseNode7;
        TLparen tlparenNode8;
        TInt tintNode9;
        TRparen trparenNode10;
        TColon tcolonNode11;
        PStmtseq pstmtseqNode12;
        PBreakHelper pbreakhelperNode13;
        PCaseHelper pcasehelperNode14;
        TDefault tdefaultNode15;
        TColon tcolonNode16;
        PStmtseq pstmtseqNode17;
        TRcurly trcurlyNode18;
        tswitchNode2 = (TSwitch)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tlcurlyNode6 = (TLcurly)nodeArrayList5.get(0);
        tcaseNode7 = (TCase)nodeArrayList6.get(0);
        tlparenNode8 = (TLparen)nodeArrayList7.get(0);
        tintNode9 = (TInt)nodeArrayList8.get(0);
        trparenNode10 = (TRparen)nodeArrayList9.get(0);
        tcolonNode11 = (TColon)nodeArrayList10.get(0);
        pstmtseqNode12 = (PStmtseq)nodeArrayList11.get(0);
        pbreakhelperNode13 = (PBreakHelper)nodeArrayList12.get(0);
        pcasehelperNode14 = (PCaseHelper)nodeArrayList13.get(0);
        tdefaultNode15 = (TDefault)nodeArrayList14.get(0);
        tcolonNode16 = (TColon)nodeArrayList15.get(0);
        pstmtseqNode17 = (PStmtseq)nodeArrayList16.get(0);
        trcurlyNode18 = (TRcurly)nodeArrayList17.get(0);

        pstmtNode1 = new ASwitchStmt(tswitchNode2, tlparenNode3, pexprNode4, trparenNode5, tlcurlyNode6, tcaseNode7, tlparenNode8, tintNode9, trparenNode10, tcolonNode11, pstmtseqNode12, pbreakhelperNode13, pcasehelperNode14, tdefaultNode15, tcolonNode16, pstmtseqNode17, trcurlyNode18);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAnotherCaseCaseHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseHelper pcasehelperNode1;
        {
            // Block
        TCase tcaseNode2;
        TLparen tlparenNode3;
        TInt tintNode4;
        TRparen trparenNode5;
        TColon tcolonNode6;
        PStmtseq pstmtseqNode7;
        PBreakHelper pbreakhelperNode8;
        PCaseHelper pcasehelperNode9;
        tcaseNode2 = (TCase)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tintNode4 = (TInt)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        pstmtseqNode7 = (PStmtseq)nodeArrayList6.get(0);
        pbreakhelperNode8 = (PBreakHelper)nodeArrayList7.get(0);
        pcasehelperNode9 = (PCaseHelper)nodeArrayList8.get(0);

        pcasehelperNode1 = new AAnotherCaseCaseHelper(tcaseNode2, tlparenNode3, tintNode4, trparenNode5, tcolonNode6, pstmtseqNode7, pbreakhelperNode8, pcasehelperNode9);
        }
	nodeList.add(pcasehelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AEpsilonCaseHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PCaseHelper pcasehelperNode1;
        {
            // Block

        pcasehelperNode1 = new AEpsilonCaseHelper();
        }
	nodeList.add(pcasehelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ABreakBreakHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBreakHelper pbreakhelperNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pbreakhelperNode1 = new ABreakBreakHelper(tbreakNode2, tsemicolonNode3);
        }
	nodeList.add(pbreakhelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AEpsilonBreakHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PBreakHelper pbreakhelperNode1;
        {
            // Block

        pbreakhelperNode1 = new AEpsilonBreakHelper();
        }
	nodeList.add(pbreakhelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMethodCallMethodChainingOption */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodChainingOption pmethodchainingoptionNode1;
        {
            // Block
        TPeriod tperiodNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        PVarListTwo pvarlisttwoNode5;
        TRparen trparenNode6;
        PMethodChainingOption pmethodchainingoptionNode7;
        tperiodNode2 = (TPeriod)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pvarlisttwoNode5 = (PVarListTwo)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        pmethodchainingoptionNode7 = (PMethodChainingOption)nodeArrayList6.get(0);

        pmethodchainingoptionNode1 = new AMethodCallMethodChainingOption(tperiodNode2, tidNode3, tlparenNode4, pvarlisttwoNode5, trparenNode6, pmethodchainingoptionNode7);
        }
	nodeList.add(pmethodchainingoptionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEpsilonMethodChainingOption */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PMethodChainingOption pmethodchainingoptionNode1;
        {
            // Block

        pmethodchainingoptionNode1 = new AEpsilonMethodChainingOption();
        }
	nodeList.add(pmethodchainingoptionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AIncrForIncrStep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForIncrStep pforincrstepNode1;
        {
            // Block
        TId tidNode2;
        TIncr tincrNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tincrNode3 = (TIncr)nodeArrayList2.get(0);

        pforincrstepNode1 = new AIncrForIncrStep(tidNode2, tincrNode3);
        }
	nodeList.add(pforincrstepNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADecrForIncrStep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForIncrStep pforincrstepNode1;
        {
            // Block
        TId tidNode2;
        TDecr tdecrNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdecrNode3 = (TDecr)nodeArrayList2.get(0);

        pforincrstepNode1 = new ADecrForIncrStep(tidNode2, tdecrNode3);
        }
	nodeList.add(pforincrstepNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAssignmentForIncrStep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForIncrStep pforincrstepNode1;
        {
            // Block
        TId tidNode2;
        TEquals tequalsNode3;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pforincrstepNode1 = new AAssignmentForIncrStep(tidNode2, tequalsNode3, pexprNode4);
        }
	nodeList.add(pforincrstepNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMoreIdsMoreIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreIds pmoreidsNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        PMoreIds pmoreidsNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pmoreidsNode4 = (PMoreIds)nodeArrayList3.get(0);

        pmoreidsNode1 = new AMoreIdsMoreIds(tcommaNode2, tidNode3, pmoreidsNode4);
        }
	nodeList.add(pmoreidsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEpsilonMoreIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PMoreIds pmoreidsNode1;
        {
            // Block

        pmoreidsNode1 = new AEpsilonMoreIds();
        }
	nodeList.add(pmoreidsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMoreIdsVarlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlist pvarlistNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        PArrayOption parrayoptionNode5;
        PMoreVarlist pmorevarlistNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        parrayoptionNode5 = (PArrayOption)nodeArrayList4.get(0);
        pmorevarlistNode6 = (PMoreVarlist)nodeArrayList5.get(0);

        pvarlistNode1 = new AMoreIdsVarlist(tidNode2, tcolonNode3, ptypeNode4, parrayoptionNode5, pmorevarlistNode6);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEpsilonVarlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVarlist pvarlistNode1;
        {
            // Block

        pvarlistNode1 = new AEpsilonVarlist();
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AArrayArrayOption */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayOption parrayoptionNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        TInt tintNode3;
        TRbracket trbracketNode4;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList2.get(0);
        trbracketNode4 = (TRbracket)nodeArrayList3.get(0);

        parrayoptionNode1 = new AArrayArrayOption(tlbracketNode2, tintNode3, trbracketNode4);
        }
	nodeList.add(parrayoptionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AEpsilonArrayOption */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PArrayOption parrayoptionNode1;
        {
            // Block

        parrayoptionNode1 = new AEpsilonArrayOption();
        }
	nodeList.add(parrayoptionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AMoreIdsMoreVarlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreVarlist pmorevarlistNode1;
        {
            // Block
        TComma tcommaNode2;
        PVarlist pvarlistNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvarlistNode3 = (PVarlist)nodeArrayList2.get(0);

        pmorevarlistNode1 = new AMoreIdsMoreVarlist(tcommaNode2, pvarlistNode3);
        }
	nodeList.add(pmorevarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AEpsilonMoreVarlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PMoreVarlist pmorevarlistNode1;
        {
            // Block

        pmorevarlistNode1 = new AEpsilonMoreVarlist();
        }
	nodeList.add(pmorevarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVarListVarListTwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarListTwo pvarlisttwoNode1;
        {
            // Block
        PExprOrBool pexprorboolNode2;
        PMoreVarListTwo pmorevarlisttwoNode3;
        pexprorboolNode2 = (PExprOrBool)nodeArrayList1.get(0);
        pmorevarlisttwoNode3 = (PMoreVarListTwo)nodeArrayList2.get(0);

        pvarlisttwoNode1 = new AVarListVarListTwo(pexprorboolNode2, pmorevarlisttwoNode3);
        }
	nodeList.add(pvarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AEpsilonVarListTwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVarListTwo pvarlisttwoNode1;
        {
            // Block

        pvarlisttwoNode1 = new AEpsilonVarListTwo();
        }
	nodeList.add(pvarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AExprOrBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprOrBool pexprorboolNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pexprorboolNode1 = new AExprOrBool(pexprNode2);
        }
	nodeList.add(pexprorboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ABoolExprOrBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprOrBool pexprorboolNode1;
        {
            // Block
        PBoolean pbooleanNode2;
        pbooleanNode2 = (PBoolean)nodeArrayList1.get(0);

        pexprorboolNode1 = new ABoolExprOrBool(pbooleanNode2);
        }
	nodeList.add(pexprorboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMoreVarListTwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreVarListTwo pmorevarlisttwoNode1;
        {
            // Block
        TComma tcommaNode2;
        PVarListTwo pvarlisttwoNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvarlisttwoNode3 = (PVarListTwo)nodeArrayList2.get(0);

        pmorevarlisttwoNode1 = new AMoreVarListTwo(tcommaNode2, pvarlisttwoNode3);
        }
	nodeList.add(pmorevarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AEpsilonMoreVarListTwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PMoreVarListTwo pmorevarlisttwoNode1;
        {
            // Block

        pmorevarlisttwoNode1 = new AEpsilonMoreVarListTwo();
        }
	nodeList.add(pmorevarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PAddop paddopNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        paddopNode3 = (PAddop)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, paddopNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMultop tmultopNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultopNode3 = (TMultop)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultopNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AExprFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExpr pexprNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pfactorNode1 = new AExprFactor(tlparenNode2, pexprNode3, trparenNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANegativeFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNegop tnegopNode2;
        PFactor pfactorNode3;
        tnegopNode2 = (TNegop)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new ANegativeFactor(tnegopNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AIntFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pfactorNode1 = new AIntFactor(tintNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ARealFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pfactorNode1 = new ARealFactor(trealNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AArrayFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PArrayOrId parrayoridNode2;
        parrayoridNode2 = (PArrayOrId)nodeArrayList1.get(0);

        pfactorNode1 = new AArrayFactor(parrayoridNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AIdvarlistFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TId tidNode2;
        TLparen tlparenNode3;
        PVarListTwo pvarlisttwoNode4;
        TRparen trparenNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pvarlisttwoNode4 = (PVarListTwo)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);

        pfactorNode1 = new AIdvarlistFactor(tidNode2, tlparenNode3, pvarlisttwoNode4, trparenNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ALastFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PArrayOrId parrayoridNode2;
        TPeriod tperiodNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PVarListTwo pvarlisttwoNode6;
        TRparen trparenNode7;
        parrayoridNode2 = (PArrayOrId)nodeArrayList1.get(0);
        tperiodNode3 = (TPeriod)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pvarlisttwoNode6 = (PVarListTwo)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);

        pfactorNode1 = new ALastFactor(parrayoridNode2, tperiodNode3, tidNode4, tlparenNode5, pvarlisttwoNode6, trparenNode7);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AArrayArrayOrId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayOrId parrayoridNode1;
        {
            // Block
        TId tidNode2;
        TLbracket tlbracketNode3;
        TInt tintNode4;
        TRbracket trbracketNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        tintNode4 = (TInt)nodeArrayList3.get(0);
        trbracketNode5 = (TRbracket)nodeArrayList4.get(0);

        parrayoridNode1 = new AArrayArrayOrId(tidNode2, tlbracketNode3, tintNode4, trbracketNode5);
        }
	nodeList.add(parrayoridNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AIdArrayOrId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayOrId parrayoridNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        parrayoridNode1 = new AIdArrayOrId(tidNode2);
        }
	nodeList.add(parrayoridNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ATrueBoolean */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanNode1 = new ATrueBoolean(ttrueNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AFalseBoolean */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanNode1 = new AFalseBoolean(tfalseNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AConditionalBoolean */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        PExpr pexprNode2;
        TCond tcondNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcondNode3 = (TCond)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pbooleanNode1 = new AConditionalBoolean(pexprNode2, tcondNode3, pexprNode4);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ABooleanBoolid */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolid pboolidNode1;
        {
            // Block
        PBoolean pbooleanNode2;
        pbooleanNode2 = (PBoolean)nodeArrayList1.get(0);

        pboolidNode1 = new ABooleanBoolid(pbooleanNode2);
        }
	nodeList.add(pboolidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AIdBoolid */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolid pboolidNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pboolidNode1 = new AIdBoolid(tidNode2);
        }
	nodeList.add(pboolidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce APlusAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TPlusop tplusopNode2;
        tplusopNode2 = (TPlusop)nodeArrayList1.get(0);

        paddopNode1 = new APlusAddop(tplusopNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AMinusAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TNegop tnegopNode2;
        tnegopNode2 = (TNegop)nodeArrayList1.get(0);

        paddopNode1 = new AMinusAddop(tnegopNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATypesType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTypeDecl ttypedeclNode2;
        ttypedeclNode2 = (TTypeDecl)nodeArrayList1.get(0);

        ptypeNode1 = new ATypesType(ttypedeclNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 2}, {40, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {35, SHIFT, 6}, {36, SHIFT, 7}, },
			{{-1, ERROR, 4}, {36, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 48}, {22, SHIFT, 11}, {36, REDUCE, 82}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 9}, {36, SHIFT, 13}, },
			{{-1, ERROR, 10}, {33, SHIFT, 14}, },
			{{-1, ERROR, 11}, {36, SHIFT, 15}, },
			{{-1, ERROR, 12}, {23, SHIFT, 16}, },
			{{-1, ERROR, 13}, {29, SHIFT, 17}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 48}, {22, SHIFT, 11}, },
			{{-1, ERROR, 16}, {35, SHIFT, 6}, {36, SHIFT, 20}, },
			{{-1, REDUCE, 50}, {36, SHIFT, 22}, },
			{{-1, ERROR, 18}, {16, SHIFT, 24}, {34, SHIFT, 25}, {35, SHIFT, 6}, {36, SHIFT, 26}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 21}, {25, SHIFT, 29}, },
			{{-1, ERROR, 22}, {23, SHIFT, 30}, },
			{{-1, ERROR, 23}, {30, SHIFT, 31}, },
			{{-1, ERROR, 24}, {29, SHIFT, 32}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 52}, {22, SHIFT, 11}, {23, REDUCE, 48}, {31, SHIFT, 33}, {36, REDUCE, 82}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 28}, {36, SHIFT, 36}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 30}, {35, SHIFT, 6}, {36, SHIFT, 20}, },
			{{-1, ERROR, 31}, {33, SHIFT, 38}, },
			{{-1, ERROR, 32}, {36, SHIFT, 39}, },
			{{-1, ERROR, 33}, {38, SHIFT, 40}, },
			{{-1, ERROR, 34}, {23, SHIFT, 41}, },
			{{-1, ERROR, 35}, {26, SHIFT, 42}, {27, SHIFT, 43}, {28, SHIFT, 44}, },
			{{-1, ERROR, 36}, {29, SHIFT, 45}, },
			{{-1, REDUCE, 52}, {31, SHIFT, 33}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, REDUCE, 52}, {31, SHIFT, 33}, },
			{{-1, ERROR, 40}, {32, SHIFT, 57}, },
			{{-1, ERROR, 41}, {35, SHIFT, 6}, {36, SHIFT, 20}, },
			{{-1, ERROR, 42}, {1, SHIFT, 59}, {11, SHIFT, 60}, {13, SHIFT, 61}, {15, SHIFT, 62}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, {39, SHIFT, 68}, },
			{{-1, ERROR, 43}, {25, SHIFT, 74}, },
			{{-1, ERROR, 44}, {25, SHIFT, 75}, },
			{{-1, REDUCE, 50}, {36, SHIFT, 22}, },
			{{-1, REDUCE, 54}, {22, SHIFT, 77}, },
			{{-1, ERROR, 47}, {29, SHIFT, 79}, },
			{{-1, ERROR, 48}, {29, SHIFT, 80}, },
			{{-1, ERROR, 49}, {29, SHIFT, 81}, },
			{{-1, ERROR, 50}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 51}, {29, SHIFT, 83}, },
			{{-1, ERROR, 52}, {29, SHIFT, 84}, },
			{{-1, REDUCE, 52}, {22, SHIFT, 11}, {23, REDUCE, 48}, {29, SHIFT, 85}, {31, SHIFT, 33}, },
			{{-1, ERROR, 54}, {34, SHIFT, 88}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, ERROR, 56}, {30, SHIFT, 90}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 58}, {25, SHIFT, 91}, },
			{{-1, ERROR, 59}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 61}, {29, SHIFT, 93}, },
			{{-1, ERROR, 62}, {36, SHIFT, 94}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 64}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 73}, {29, SHIFT, 96}, {31, SHIFT, 97}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 68}, {25, SHIFT, 98}, },
			{{-1, ERROR, 69}, {0, SHIFT, 99}, {1, SHIFT, 100}, {3, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 62}, {2, SHIFT, 104}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 69}, {24, SHIFT, 105}, },
			{{-1, ERROR, 73}, {25, SHIFT, 106}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 76}, {30, SHIFT, 107}, },
			{{-1, REDUCE, 50}, {36, SHIFT, 22}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 79}, {35, SHIFT, 6}, {36, SHIFT, 109}, },
			{{-1, ERROR, 80}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 111}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 81}, {36, SHIFT, 115}, },
			{{-1, ERROR, 82}, {0, SHIFT, 99}, {1, SHIFT, 100}, {25, SHIFT, 116}, },
			{{-1, ERROR, 83}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 84}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 86}, {23, SHIFT, 123}, },
			{{-1, ERROR, 87}, {24, SHIFT, 124}, {26, SHIFT, 125}, {27, SHIFT, 126}, {28, SHIFT, 127}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 90}, {25, SHIFT, 128}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 93}, {30, SHIFT, 129}, },
			{{-1, ERROR, 94}, {29, SHIFT, 130}, },
			{{-1, ERROR, 95}, {0, SHIFT, 99}, {1, SHIFT, 100}, {30, SHIFT, 131}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 97}, {38, SHIFT, 133}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 101}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 103}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 104}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 105}, {36, SHIFT, 137}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 107}, {33, SHIFT, 138}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 82}, {26, SHIFT, 139}, },
			{{-1, ERROR, 110}, {36, SHIFT, 140}, },
			{{-1, REDUCE, 73}, {29, SHIFT, 96}, {30, REDUCE, 78}, {31, SHIFT, 97}, },
			{{-1, ERROR, 112}, {0, SHIFT, 99}, {1, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 114}, {30, SHIFT, 141}, },
			{{-1, REDUCE, 52}, {31, SHIFT, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 117}, {0, SHIFT, 99}, {1, SHIFT, 100}, {30, SHIFT, 143}, },
			{{-1, ERROR, 118}, {30, SHIFT, 144}, },
			{{-1, ERROR, 119}, {30, SHIFT, 145}, },
			{{-1, REDUCE, 60}, {22, SHIFT, 146}, },
			{{-1, REDUCE, 57}, {0, SHIFT, 99}, {1, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 123}, {35, SHIFT, 6}, {36, SHIFT, 20}, },
			{{-1, ERROR, 124}, {36, SHIFT, 149}, },
			{{-1, ERROR, 125}, {1, SHIFT, 59}, {11, SHIFT, 60}, {13, SHIFT, 150}, {15, SHIFT, 151}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, {39, SHIFT, 152}, },
			{{-1, ERROR, 126}, {25, SHIFT, 155}, },
			{{-1, ERROR, 127}, {25, SHIFT, 156}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 129}, {25, SHIFT, 157}, },
			{{-1, ERROR, 130}, {30, SHIFT, 158}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 132}, {30, SHIFT, 159}, },
			{{-1, ERROR, 133}, {32, SHIFT, 160}, },
			{{-1, REDUCE, 76}, {0, SHIFT, 99}, {1, SHIFT, 100}, },
			{{-1, REDUCE, 61}, {2, SHIFT, 104}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 137}, {29, SHIFT, 161}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, ERROR, 139}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 140}, {26, SHIFT, 164}, },
			{{-1, ERROR, 141}, {19, SHIFT, 165}, },
			{{-1, ERROR, 142}, {30, SHIFT, 166}, },
			{{-1, ERROR, 143}, {33, SHIFT, 167}, },
			{{-1, ERROR, 144}, {33, SHIFT, 168}, },
			{{-1, ERROR, 145}, {25, SHIFT, 169}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 52}, {31, SHIFT, 33}, },
			{{-1, ERROR, 149}, {29, SHIFT, 172}, },
			{{-1, ERROR, 150}, {29, SHIFT, 173}, },
			{{-1, ERROR, 151}, {36, SHIFT, 174}, },
			{{-1, ERROR, 152}, {25, SHIFT, 175}, },
			{{-1, ERROR, 153}, {0, SHIFT, 99}, {1, SHIFT, 100}, {3, SHIFT, 101}, {25, SHIFT, 176}, },
			{{-1, ERROR, 154}, {25, SHIFT, 177}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 158}, {25, SHIFT, 178}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 162}, {34, SHIFT, 180}, },
			{{-1, ERROR, 163}, {0, SHIFT, 99}, {1, SHIFT, 100}, {25, SHIFT, 181}, },
			{{-1, ERROR, 164}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 165}, {33, SHIFT, 183}, },
			{{-1, ERROR, 166}, {25, SHIFT, 184}, },
			{{-1, ERROR, 167}, {6, SHIFT, 185}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 171}, {25, SHIFT, 187}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 173}, {30, SHIFT, 189}, },
			{{-1, ERROR, 174}, {29, SHIFT, 190}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 179}, {30, SHIFT, 191}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 181}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 182}, {0, SHIFT, 99}, {1, SHIFT, 100}, {25, SHIFT, 193}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 185}, {29, SHIFT, 195}, },
			{{-1, ERROR, 186}, {34, SHIFT, 196}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 188}, {30, SHIFT, 197}, },
			{{-1, ERROR, 189}, {25, SHIFT, 198}, },
			{{-1, ERROR, 190}, {30, SHIFT, 199}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 192}, {25, SHIFT, 200}, },
			{{-1, ERROR, 193}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, ERROR, 194}, {34, SHIFT, 202}, },
			{{-1, ERROR, 195}, {38, SHIFT, 203}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 43}, {24, SHIFT, 204}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 199}, {25, SHIFT, 206}, },
			{{-1, ERROR, 200}, {36, SHIFT, 207}, },
			{{-1, ERROR, 201}, {25, SHIFT, 209}, },
			{{-1, REDUCE, 23}, {9, SHIFT, 210}, },
			{{-1, ERROR, 203}, {30, SHIFT, 211}, },
			{{-1, ERROR, 204}, {36, SHIFT, 212}, },
			{{-1, ERROR, 205}, {25, SHIFT, 213}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 207}, {26, SHIFT, 214}, {27, SHIFT, 215}, {28, SHIFT, 216}, },
			{{-1, ERROR, 208}, {30, SHIFT, 217}, },
			{{-1, ERROR, 209}, {36, SHIFT, 207}, },
			{{-1, ERROR, 210}, {33, SHIFT, 219}, },
			{{-1, ERROR, 211}, {23, SHIFT, 220}, },
			{{-1, ERROR, 212}, {29, SHIFT, 221}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 214}, {1, SHIFT, 59}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 217}, {33, SHIFT, 223}, },
			{{-1, ERROR, 218}, {30, SHIFT, 224}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 59}, {11, SHIFT, 60}, {20, SHIFT, 63}, {29, SHIFT, 64}, {36, SHIFT, 65}, {37, SHIFT, 66}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 46}, {0, SHIFT, 99}, {1, SHIFT, 100}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, ERROR, 224}, {33, SHIFT, 229}, },
			{{-1, ERROR, 225}, {34, SHIFT, 230}, },
			{{-1, REDUCE, 41}, {5, SHIFT, 231}, },
			{{-1, ERROR, 227}, {30, SHIFT, 233}, },
			{{-1, ERROR, 228}, {34, SHIFT, 234}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 231}, {25, SHIFT, 236}, },
			{{-1, REDUCE, 39}, {6, SHIFT, 237}, },
			{{-1, REDUCE, 43}, {24, SHIFT, 204}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 235}, {34, SHIFT, 240}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 237}, {29, SHIFT, 241}, },
			{{-1, ERROR, 238}, {8, SHIFT, 242}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 241}, {38, SHIFT, 243}, },
			{{-1, ERROR, 242}, {23, SHIFT, 244}, },
			{{-1, ERROR, 243}, {30, SHIFT, 245}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, ERROR, 245}, {23, SHIFT, 247}, },
			{{-1, ERROR, 246}, {34, SHIFT, 248}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 47}, {14, SHIFT, 48}, {16, SHIFT, 49}, {17, SHIFT, 50}, {18, SHIFT, 51}, {21, SHIFT, 52}, {36, SHIFT, 53}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 41}, {5, SHIFT, 231}, },
			{{-1, REDUCE, 39}, {6, SHIFT, 237}, },
			{{-1, REDUCE, 38}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 8}, },
			{{-1, 18}, },
			{{-1, 27}, },
			{{-1, 54}, {55, 89}, {138, 162}, {168, 186}, {183, 194}, {219, 225}, {220, 226}, {223, 228}, {229, 235}, {244, 246}, {247, 249}, },
			{{-1, 55}, },
			{{-1, 238}, {250, 251}, },
			{{-1, 232}, {249, 250}, },
			{{-1, 205}, {233, 239}, },
			{{-1, 208}, {209, 218}, },
			{{-1, 12}, {15, 19}, {26, 34}, {53, 86}, },
			{{-1, 23}, {45, 76}, {77, 108}, },
			{{-1, 35}, {37, 46}, {39, 56}, {53, 87}, {115, 142}, {148, 171}, },
			{{-1, 78}, },
			{{-1, 119}, {96, 132}, {146, 170}, {161, 179}, {172, 188}, {221, 227}, },
			{{-1, 120}, },
			{{-1, 147}, },
			{{-1, 121}, {42, 69}, {50, 82}, {64, 95}, {80, 112}, {83, 117}, {84, 112}, {101, 134}, {125, 153}, {139, 163}, {164, 182}, {181, 112}, {193, 112}, {214, 222}, },
			{{-1, 70}, {103, 135}, },
			{{-1, 71}, {59, 92}, {104, 136}, },
			{{-1, 72}, },
			{{-1, 122}, {42, 73}, {80, 113}, {84, 118}, {125, 154}, {181, 192}, {193, 201}, },
			{{-1, 114}, },
			{{-1, 103}, },
			{{-1, 9}, {16, 21}, {18, 28}, {30, 37}, {41, 58}, {79, 110}, {123, 148}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'BEGIN'",
			"expecting: 'CLASS', 'END', type decl, id",
			"expecting: EOF",
			"expecting: id",
			"expecting: ',', ';', ')', '[', id",
			"expecting: ',', ':', id",
			"expecting: '{'",
			"expecting: ':'",
			"expecting: '('",
			"expecting: 'PUT', '}', type decl, id",
			"expecting: ',', ':'",
			"expecting: type decl, id",
			"expecting: ')', id",
			"expecting: ',', ';', ')', '['",
			"expecting: ';'",
			"expecting: ')'",
			"expecting: ',', ':', ':=', '++', '--', '[', id",
			"expecting: int",
			"expecting: ':=', '++', '--'",
			"expecting: ',', ')', '['",
			"expecting: 'FOR', 'IF', 'PUT', 'RETURN', 'SWITCH', 'WHILE', '}', id",
			"expecting: ')', '['",
			"expecting: ']'",
			"expecting: '-', 'FALSE', 'GET', 'NEW', 'TRUE', '(', id, real, int, anychars",
			"expecting: ',', ')'",
			"expecting: '-', '(', id, real, int",
			"expecting: ',', ':', '.', ':=', '++', '--', '(', '['",
			"expecting: '}'",
			"expecting: 'BREAK', 'CASE', 'DEFAULT', 'FOR', 'IF', 'PUT', 'RETURN', 'SWITCH', 'WHILE', '}', id",
			"expecting: ',', '.', ';', ':=', '++', '--', ')'",
			"expecting: ',', ';', ')'",
			"expecting: '+', '-', multop, cond, ',', '.', ';', '(', ')', '['",
			"expecting: '+', '-', multop, cond, ',', ';', ')'",
			"expecting: '+', '-', cond, ';'",
			"expecting: '+', '-', multop, cond, ',', '.', ';', ')'",
			"expecting: '-', 'FALSE', 'TRUE', '(', id, real, int",
			"expecting: '+', '-', ';'",
			"expecting: '-', 'FALSE', 'TRUE', '(', ')', id, real, int",
			"expecting: '.', ':=', '++', '--'",
			"expecting: 'BREAK', 'CASE', 'DEFAULT', '}'",
			"expecting: '+', '-', ')'",
			"expecting: ':=', id",
			"expecting: '+', '-', multop, cond, '.', '(', ')', '['",
			"expecting: '+', '-', cond",
			"expecting: '+', '-', cond, ',', ')'",
			"expecting: '+', '-', ',', ';', ')'",
			"expecting: ':='",
			"expecting: 'THEN'",
			"expecting: ';', '['",
			"expecting: 'CASE'",
			"expecting: '.', ';'",
			"expecting: 'BREAK', 'CASE', 'DEFAULT', 'ELSE', 'FOR', 'IF', 'PUT', 'RETURN', 'SWITCH', 'WHILE', '}', id",
			"expecting: 'BREAK', 'CASE', 'DEFAULT', 'FOR', 'IF', 'PUT', 'RETURN', 'SWITCH', 'WHILE', id",
			"expecting: 'BREAK', 'CASE', 'DEFAULT'",
			"expecting: 'CASE', 'DEFAULT'",
			"expecting: 'DEFAULT'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 3, 2, 4, 5, 1, 3, 6, 3, 7, 8, 9, 10, 11, 12, 9, 7, 13, 14, 7, 15, 8, 1, 16, 9, 3, 1, 11, 6, 3, 17, 7, 18, 8, 19, 20, 21, 22, 11, 23, 14, 14, 12, 24, 8, 8, 8, 25, 8, 8, 26, 27, 28, 15, 29, 14, 25, 30, 8, 3, 30, 25, 31, 32, 32, 14, 33, 32, 32, 34, 14, 9, 9, 15, 12, 15, 11, 35, 3, 36, 25, 35, 37, 7, 38, 1, 39, 14, 9, 32, 15, 8, 40, 37, 17, 9, 25, 25, 25, 9, 25, 25, 3, 9, 6, 15, 41, 3, 42, 43, 15, 15, 21, 28, 40, 15, 15, 24, 44, 24, 11, 3, 23, 14, 14, 9, 14, 15, 32, 15, 22, 45, 32, 32, 8, 20, 25, 46, 47, 15, 6, 6, 14, 37, 15, 48, 8, 8, 3, 14, 33, 14, 28, 28, 9, 14, 32, 34, 37, 27, 36, 25, 6, 14, 49, 20, 28, 15, 14, 37, 15, 8, 28, 28, 28, 9, 15, 9, 35, 36, 20, 28, 8, 27, 28, 15, 14, 15, 32, 14, 35, 27, 17, 28, 50, 28, 14, 3, 14, 51, 15, 3, 14, 28, 18, 15, 3, 6, 7, 8, 28, 25, 15, 15, 6, 15, 20, 52, 37, 40, 20, 6, 27, 53, 15, 27, 20, 28, 14, 54, 50, 28, 27, 54, 8, 55, 14, 28, 17, 7, 15, 20, 7, 27, 52, 28, 53, 54, 55, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
