/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class AForStmt extends PStmt
{
    private TFor _for_;
    private TLparen _lparen_;
    private PForOptionalType _forOptionalType_;
    private TId _id_;
    private TEquals _equals_;
    private PExpr _expr_;
    private TSemicolon _first_;
    private PBoolean _boolean_;
    private TSemicolon _second_;
    private PForIncrStep _forIncrStep_;
    private TRparen _rparen_;
    private TLcurly _lcurly_;
    private PStmtseq _stmtseq_;
    private TRcurly _rcurly_;

    public AForStmt()
    {
        // Constructor
    }

    public AForStmt(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PForOptionalType _forOptionalType_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TSemicolon _first_,
        @SuppressWarnings("hiding") PBoolean _boolean_,
        @SuppressWarnings("hiding") TSemicolon _second_,
        @SuppressWarnings("hiding") PForIncrStep _forIncrStep_,
        @SuppressWarnings("hiding") TRparen _rparen_,
        @SuppressWarnings("hiding") TLcurly _lcurly_,
        @SuppressWarnings("hiding") PStmtseq _stmtseq_,
        @SuppressWarnings("hiding") TRcurly _rcurly_)
    {
        // Constructor
        setFor(_for_);

        setLparen(_lparen_);

        setForOptionalType(_forOptionalType_);

        setId(_id_);

        setEquals(_equals_);

        setExpr(_expr_);

        setFirst(_first_);

        setBoolean(_boolean_);

        setSecond(_second_);

        setForIncrStep(_forIncrStep_);

        setRparen(_rparen_);

        setLcurly(_lcurly_);

        setStmtseq(_stmtseq_);

        setRcurly(_rcurly_);

    }

    @Override
    public Object clone()
    {
        return new AForStmt(
            cloneNode(this._for_),
            cloneNode(this._lparen_),
            cloneNode(this._forOptionalType_),
            cloneNode(this._id_),
            cloneNode(this._equals_),
            cloneNode(this._expr_),
            cloneNode(this._first_),
            cloneNode(this._boolean_),
            cloneNode(this._second_),
            cloneNode(this._forIncrStep_),
            cloneNode(this._rparen_),
            cloneNode(this._lcurly_),
            cloneNode(this._stmtseq_),
            cloneNode(this._rcurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStmt(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PForOptionalType getForOptionalType()
    {
        return this._forOptionalType_;
    }

    public void setForOptionalType(PForOptionalType node)
    {
        if(this._forOptionalType_ != null)
        {
            this._forOptionalType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forOptionalType_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TSemicolon getFirst()
    {
        return this._first_;
    }

    public void setFirst(TSemicolon node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public PBoolean getBoolean()
    {
        return this._boolean_;
    }

    public void setBoolean(PBoolean node)
    {
        if(this._boolean_ != null)
        {
            this._boolean_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolean_ = node;
    }

    public TSemicolon getSecond()
    {
        return this._second_;
    }

    public void setSecond(TSemicolon node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public PForIncrStep getForIncrStep()
    {
        return this._forIncrStep_;
    }

    public void setForIncrStep(PForIncrStep node)
    {
        if(this._forIncrStep_ != null)
        {
            this._forIncrStep_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forIncrStep_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    public TLcurly getLcurly()
    {
        return this._lcurly_;
    }

    public void setLcurly(TLcurly node)
    {
        if(this._lcurly_ != null)
        {
            this._lcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcurly_ = node;
    }

    public PStmtseq getStmtseq()
    {
        return this._stmtseq_;
    }

    public void setStmtseq(PStmtseq node)
    {
        if(this._stmtseq_ != null)
        {
            this._stmtseq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtseq_ = node;
    }

    public TRcurly getRcurly()
    {
        return this._rcurly_;
    }

    public void setRcurly(TRcurly node)
    {
        if(this._rcurly_ != null)
        {
            this._rcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._lparen_)
            + toString(this._forOptionalType_)
            + toString(this._id_)
            + toString(this._equals_)
            + toString(this._expr_)
            + toString(this._first_)
            + toString(this._boolean_)
            + toString(this._second_)
            + toString(this._forIncrStep_)
            + toString(this._rparen_)
            + toString(this._lcurly_)
            + toString(this._stmtseq_)
            + toString(this._rcurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._forOptionalType_ == child)
        {
            this._forOptionalType_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._boolean_ == child)
        {
            this._boolean_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._forIncrStep_ == child)
        {
            this._forIncrStep_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        if(this._lcurly_ == child)
        {
            this._lcurly_ = null;
            return;
        }

        if(this._stmtseq_ == child)
        {
            this._stmtseq_ = null;
            return;
        }

        if(this._rcurly_ == child)
        {
            this._rcurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._forOptionalType_ == oldChild)
        {
            setForOptionalType((PForOptionalType) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((TSemicolon) newChild);
            return;
        }

        if(this._boolean_ == oldChild)
        {
            setBoolean((PBoolean) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((TSemicolon) newChild);
            return;
        }

        if(this._forIncrStep_ == oldChild)
        {
            setForIncrStep((PForIncrStep) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(this._lcurly_ == oldChild)
        {
            setLcurly((TLcurly) newChild);
            return;
        }

        if(this._stmtseq_ == oldChild)
        {
            setStmtseq((PStmtseq) newChild);
            return;
        }

        if(this._rcurly_ == oldChild)
        {
            setRcurly((TRcurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
