/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class ASwitchStmt extends PStmt
{
    private TSwitch _switch_;
    private TLparen _first_;
    private PExpr _expr_;
    private TRparen _second_;
    private TLcurly _lcurly_;
    private TCase _case_;
    private TLparen _third_;
    private TInt _int_;
    private TRparen _fourth_;
    private TColon _fifth_;
    private PStmtseq _stmts_;
    private PBreakHelper _breakHelper_;
    private PCaseHelper _caseHelper_;
    private TDefault _default_;
    private TColon _seccolon_;
    private PStmtseq _defaultStmts_;
    private TRcurly _rcurly_;

    public ASwitchStmt()
    {
        // Constructor
    }

    public ASwitchStmt(
        @SuppressWarnings("hiding") TSwitch _switch_,
        @SuppressWarnings("hiding") TLparen _first_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRparen _second_,
        @SuppressWarnings("hiding") TLcurly _lcurly_,
        @SuppressWarnings("hiding") TCase _case_,
        @SuppressWarnings("hiding") TLparen _third_,
        @SuppressWarnings("hiding") TInt _int_,
        @SuppressWarnings("hiding") TRparen _fourth_,
        @SuppressWarnings("hiding") TColon _fifth_,
        @SuppressWarnings("hiding") PStmtseq _stmts_,
        @SuppressWarnings("hiding") PBreakHelper _breakHelper_,
        @SuppressWarnings("hiding") PCaseHelper _caseHelper_,
        @SuppressWarnings("hiding") TDefault _default_,
        @SuppressWarnings("hiding") TColon _seccolon_,
        @SuppressWarnings("hiding") PStmtseq _defaultStmts_,
        @SuppressWarnings("hiding") TRcurly _rcurly_)
    {
        // Constructor
        setSwitch(_switch_);

        setFirst(_first_);

        setExpr(_expr_);

        setSecond(_second_);

        setLcurly(_lcurly_);

        setCase(_case_);

        setThird(_third_);

        setInt(_int_);

        setFourth(_fourth_);

        setFifth(_fifth_);

        setStmts(_stmts_);

        setBreakHelper(_breakHelper_);

        setCaseHelper(_caseHelper_);

        setDefault(_default_);

        setSeccolon(_seccolon_);

        setDefaultStmts(_defaultStmts_);

        setRcurly(_rcurly_);

    }

    @Override
    public Object clone()
    {
        return new ASwitchStmt(
            cloneNode(this._switch_),
            cloneNode(this._first_),
            cloneNode(this._expr_),
            cloneNode(this._second_),
            cloneNode(this._lcurly_),
            cloneNode(this._case_),
            cloneNode(this._third_),
            cloneNode(this._int_),
            cloneNode(this._fourth_),
            cloneNode(this._fifth_),
            cloneNode(this._stmts_),
            cloneNode(this._breakHelper_),
            cloneNode(this._caseHelper_),
            cloneNode(this._default_),
            cloneNode(this._seccolon_),
            cloneNode(this._defaultStmts_),
            cloneNode(this._rcurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASwitchStmt(this);
    }

    public TSwitch getSwitch()
    {
        return this._switch_;
    }

    public void setSwitch(TSwitch node)
    {
        if(this._switch_ != null)
        {
            this._switch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._switch_ = node;
    }

    public TLparen getFirst()
    {
        return this._first_;
    }

    public void setFirst(TLparen node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRparen getSecond()
    {
        return this._second_;
    }

    public void setSecond(TRparen node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public TLcurly getLcurly()
    {
        return this._lcurly_;
    }

    public void setLcurly(TLcurly node)
    {
        if(this._lcurly_ != null)
        {
            this._lcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcurly_ = node;
    }

    public TCase getCase()
    {
        return this._case_;
    }

    public void setCase(TCase node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public TLparen getThird()
    {
        return this._third_;
    }

    public void setThird(TLparen node)
    {
        if(this._third_ != null)
        {
            this._third_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._third_ = node;
    }

    public TInt getInt()
    {
        return this._int_;
    }

    public void setInt(TInt node)
    {
        if(this._int_ != null)
        {
            this._int_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._int_ = node;
    }

    public TRparen getFourth()
    {
        return this._fourth_;
    }

    public void setFourth(TRparen node)
    {
        if(this._fourth_ != null)
        {
            this._fourth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fourth_ = node;
    }

    public TColon getFifth()
    {
        return this._fifth_;
    }

    public void setFifth(TColon node)
    {
        if(this._fifth_ != null)
        {
            this._fifth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fifth_ = node;
    }

    public PStmtseq getStmts()
    {
        return this._stmts_;
    }

    public void setStmts(PStmtseq node)
    {
        if(this._stmts_ != null)
        {
            this._stmts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmts_ = node;
    }

    public PBreakHelper getBreakHelper()
    {
        return this._breakHelper_;
    }

    public void setBreakHelper(PBreakHelper node)
    {
        if(this._breakHelper_ != null)
        {
            this._breakHelper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._breakHelper_ = node;
    }

    public PCaseHelper getCaseHelper()
    {
        return this._caseHelper_;
    }

    public void setCaseHelper(PCaseHelper node)
    {
        if(this._caseHelper_ != null)
        {
            this._caseHelper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caseHelper_ = node;
    }

    public TDefault getDefault()
    {
        return this._default_;
    }

    public void setDefault(TDefault node)
    {
        if(this._default_ != null)
        {
            this._default_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._default_ = node;
    }

    public TColon getSeccolon()
    {
        return this._seccolon_;
    }

    public void setSeccolon(TColon node)
    {
        if(this._seccolon_ != null)
        {
            this._seccolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._seccolon_ = node;
    }

    public PStmtseq getDefaultStmts()
    {
        return this._defaultStmts_;
    }

    public void setDefaultStmts(PStmtseq node)
    {
        if(this._defaultStmts_ != null)
        {
            this._defaultStmts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._defaultStmts_ = node;
    }

    public TRcurly getRcurly()
    {
        return this._rcurly_;
    }

    public void setRcurly(TRcurly node)
    {
        if(this._rcurly_ != null)
        {
            this._rcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._switch_)
            + toString(this._first_)
            + toString(this._expr_)
            + toString(this._second_)
            + toString(this._lcurly_)
            + toString(this._case_)
            + toString(this._third_)
            + toString(this._int_)
            + toString(this._fourth_)
            + toString(this._fifth_)
            + toString(this._stmts_)
            + toString(this._breakHelper_)
            + toString(this._caseHelper_)
            + toString(this._default_)
            + toString(this._seccolon_)
            + toString(this._defaultStmts_)
            + toString(this._rcurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._switch_ == child)
        {
            this._switch_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._lcurly_ == child)
        {
            this._lcurly_ = null;
            return;
        }

        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this._third_ == child)
        {
            this._third_ = null;
            return;
        }

        if(this._int_ == child)
        {
            this._int_ = null;
            return;
        }

        if(this._fourth_ == child)
        {
            this._fourth_ = null;
            return;
        }

        if(this._fifth_ == child)
        {
            this._fifth_ = null;
            return;
        }

        if(this._stmts_ == child)
        {
            this._stmts_ = null;
            return;
        }

        if(this._breakHelper_ == child)
        {
            this._breakHelper_ = null;
            return;
        }

        if(this._caseHelper_ == child)
        {
            this._caseHelper_ = null;
            return;
        }

        if(this._default_ == child)
        {
            this._default_ = null;
            return;
        }

        if(this._seccolon_ == child)
        {
            this._seccolon_ = null;
            return;
        }

        if(this._defaultStmts_ == child)
        {
            this._defaultStmts_ = null;
            return;
        }

        if(this._rcurly_ == child)
        {
            this._rcurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._switch_ == oldChild)
        {
            setSwitch((TSwitch) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((TLparen) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((TRparen) newChild);
            return;
        }

        if(this._lcurly_ == oldChild)
        {
            setLcurly((TLcurly) newChild);
            return;
        }

        if(this._case_ == oldChild)
        {
            setCase((TCase) newChild);
            return;
        }

        if(this._third_ == oldChild)
        {
            setThird((TLparen) newChild);
            return;
        }

        if(this._int_ == oldChild)
        {
            setInt((TInt) newChild);
            return;
        }

        if(this._fourth_ == oldChild)
        {
            setFourth((TRparen) newChild);
            return;
        }

        if(this._fifth_ == oldChild)
        {
            setFifth((TColon) newChild);
            return;
        }

        if(this._stmts_ == oldChild)
        {
            setStmts((PStmtseq) newChild);
            return;
        }

        if(this._breakHelper_ == oldChild)
        {
            setBreakHelper((PBreakHelper) newChild);
            return;
        }

        if(this._caseHelper_ == oldChild)
        {
            setCaseHelper((PCaseHelper) newChild);
            return;
        }

        if(this._default_ == oldChild)
        {
            setDefault((TDefault) newChild);
            return;
        }

        if(this._seccolon_ == oldChild)
        {
            setSeccolon((TColon) newChild);
            return;
        }

        if(this._defaultStmts_ == oldChild)
        {
            setDefaultStmts((PStmtseq) newChild);
            return;
        }

        if(this._rcurly_ == oldChild)
        {
            setRcurly((TRcurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
