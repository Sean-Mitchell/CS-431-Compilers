/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class ADeclObjectMethodstmtseq extends PMethodstmtseq
{
    private TId _leftSide_;
    private PArrayOption _arrayOption_;
    private TEquals _equals_;
    private TNew _new_;
    private TId _rightSide_;
    private TLparen _lparen_;
    private TRparen _rparen_;
    private TSemicolon _semicolon_;

    public ADeclObjectMethodstmtseq()
    {
        // Constructor
    }

    public ADeclObjectMethodstmtseq(
        @SuppressWarnings("hiding") TId _leftSide_,
        @SuppressWarnings("hiding") PArrayOption _arrayOption_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") TNew _new_,
        @SuppressWarnings("hiding") TId _rightSide_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") TRparen _rparen_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setLeftSide(_leftSide_);

        setArrayOption(_arrayOption_);

        setEquals(_equals_);

        setNew(_new_);

        setRightSide(_rightSide_);

        setLparen(_lparen_);

        setRparen(_rparen_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ADeclObjectMethodstmtseq(
            cloneNode(this._leftSide_),
            cloneNode(this._arrayOption_),
            cloneNode(this._equals_),
            cloneNode(this._new_),
            cloneNode(this._rightSide_),
            cloneNode(this._lparen_),
            cloneNode(this._rparen_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclObjectMethodstmtseq(this);
    }

    public TId getLeftSide()
    {
        return this._leftSide_;
    }

    public void setLeftSide(TId node)
    {
        if(this._leftSide_ != null)
        {
            this._leftSide_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftSide_ = node;
    }

    public PArrayOption getArrayOption()
    {
        return this._arrayOption_;
    }

    public void setArrayOption(PArrayOption node)
    {
        if(this._arrayOption_ != null)
        {
            this._arrayOption_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayOption_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public TNew getNew()
    {
        return this._new_;
    }

    public void setNew(TNew node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public TId getRightSide()
    {
        return this._rightSide_;
    }

    public void setRightSide(TId node)
    {
        if(this._rightSide_ != null)
        {
            this._rightSide_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightSide_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftSide_)
            + toString(this._arrayOption_)
            + toString(this._equals_)
            + toString(this._new_)
            + toString(this._rightSide_)
            + toString(this._lparen_)
            + toString(this._rparen_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftSide_ == child)
        {
            this._leftSide_ = null;
            return;
        }

        if(this._arrayOption_ == child)
        {
            this._arrayOption_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._rightSide_ == child)
        {
            this._rightSide_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftSide_ == oldChild)
        {
            setLeftSide((TId) newChild);
            return;
        }

        if(this._arrayOption_ == oldChild)
        {
            setArrayOption((PArrayOption) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(this._rightSide_ == oldChild)
        {
            setRightSide((TId) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
