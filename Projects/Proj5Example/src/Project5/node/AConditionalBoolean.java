/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class AConditionalBoolean extends PBoolean
{
    private PExpr _first_;
    private TCond _cond_;
    private PExpr _sec_;

    public AConditionalBoolean()
    {
        // Constructor
    }

    public AConditionalBoolean(
        @SuppressWarnings("hiding") PExpr _first_,
        @SuppressWarnings("hiding") TCond _cond_,
        @SuppressWarnings("hiding") PExpr _sec_)
    {
        // Constructor
        setFirst(_first_);

        setCond(_cond_);

        setSec(_sec_);

    }

    @Override
    public Object clone()
    {
        return new AConditionalBoolean(
            cloneNode(this._first_),
            cloneNode(this._cond_),
            cloneNode(this._sec_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditionalBoolean(this);
    }

    public PExpr getFirst()
    {
        return this._first_;
    }

    public void setFirst(PExpr node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public TCond getCond()
    {
        return this._cond_;
    }

    public void setCond(TCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public PExpr getSec()
    {
        return this._sec_;
    }

    public void setSec(PExpr node)
    {
        if(this._sec_ != null)
        {
            this._sec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sec_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._cond_)
            + toString(this._sec_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._sec_ == child)
        {
            this._sec_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((PExpr) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((TCond) newChild);
            return;
        }

        if(this._sec_ == oldChild)
        {
            setSec((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
