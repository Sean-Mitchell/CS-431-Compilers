/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseBlockStmt extends PStmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PBoolid _boolid_;
    private TRparen _rparen_;
    private TThen _then_;
    private TLcurly _iflcurly_;
    private PStmtseq _ifBlockStmts_;
    private TRcurly _ifrcurly_;
    private TElse _else_;
    private TLcurly _elselcurly_;
    private PStmtseq _elseBlockStmts_;
    private TRcurly _elsercurly_;

    public AIfElseBlockStmt()
    {
        // Constructor
    }

    public AIfElseBlockStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PBoolid _boolid_,
        @SuppressWarnings("hiding") TRparen _rparen_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") TLcurly _iflcurly_,
        @SuppressWarnings("hiding") PStmtseq _ifBlockStmts_,
        @SuppressWarnings("hiding") TRcurly _ifrcurly_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") TLcurly _elselcurly_,
        @SuppressWarnings("hiding") PStmtseq _elseBlockStmts_,
        @SuppressWarnings("hiding") TRcurly _elsercurly_)
    {
        // Constructor
        setIf(_if_);

        setLparen(_lparen_);

        setBoolid(_boolid_);

        setRparen(_rparen_);

        setThen(_then_);

        setIflcurly(_iflcurly_);

        setIfBlockStmts(_ifBlockStmts_);

        setIfrcurly(_ifrcurly_);

        setElse(_else_);

        setElselcurly(_elselcurly_);

        setElseBlockStmts(_elseBlockStmts_);

        setElsercurly(_elsercurly_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseBlockStmt(
            cloneNode(this._if_),
            cloneNode(this._lparen_),
            cloneNode(this._boolid_),
            cloneNode(this._rparen_),
            cloneNode(this._then_),
            cloneNode(this._iflcurly_),
            cloneNode(this._ifBlockStmts_),
            cloneNode(this._ifrcurly_),
            cloneNode(this._else_),
            cloneNode(this._elselcurly_),
            cloneNode(this._elseBlockStmts_),
            cloneNode(this._elsercurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseBlockStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PBoolid getBoolid()
    {
        return this._boolid_;
    }

    public void setBoolid(PBoolid node)
    {
        if(this._boolid_ != null)
        {
            this._boolid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolid_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public TLcurly getIflcurly()
    {
        return this._iflcurly_;
    }

    public void setIflcurly(TLcurly node)
    {
        if(this._iflcurly_ != null)
        {
            this._iflcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iflcurly_ = node;
    }

    public PStmtseq getIfBlockStmts()
    {
        return this._ifBlockStmts_;
    }

    public void setIfBlockStmts(PStmtseq node)
    {
        if(this._ifBlockStmts_ != null)
        {
            this._ifBlockStmts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifBlockStmts_ = node;
    }

    public TRcurly getIfrcurly()
    {
        return this._ifrcurly_;
    }

    public void setIfrcurly(TRcurly node)
    {
        if(this._ifrcurly_ != null)
        {
            this._ifrcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifrcurly_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public TLcurly getElselcurly()
    {
        return this._elselcurly_;
    }

    public void setElselcurly(TLcurly node)
    {
        if(this._elselcurly_ != null)
        {
            this._elselcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elselcurly_ = node;
    }

    public PStmtseq getElseBlockStmts()
    {
        return this._elseBlockStmts_;
    }

    public void setElseBlockStmts(PStmtseq node)
    {
        if(this._elseBlockStmts_ != null)
        {
            this._elseBlockStmts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseBlockStmts_ = node;
    }

    public TRcurly getElsercurly()
    {
        return this._elsercurly_;
    }

    public void setElsercurly(TRcurly node)
    {
        if(this._elsercurly_ != null)
        {
            this._elsercurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsercurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lparen_)
            + toString(this._boolid_)
            + toString(this._rparen_)
            + toString(this._then_)
            + toString(this._iflcurly_)
            + toString(this._ifBlockStmts_)
            + toString(this._ifrcurly_)
            + toString(this._else_)
            + toString(this._elselcurly_)
            + toString(this._elseBlockStmts_)
            + toString(this._elsercurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._boolid_ == child)
        {
            this._boolid_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._iflcurly_ == child)
        {
            this._iflcurly_ = null;
            return;
        }

        if(this._ifBlockStmts_ == child)
        {
            this._ifBlockStmts_ = null;
            return;
        }

        if(this._ifrcurly_ == child)
        {
            this._ifrcurly_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elselcurly_ == child)
        {
            this._elselcurly_ = null;
            return;
        }

        if(this._elseBlockStmts_ == child)
        {
            this._elseBlockStmts_ = null;
            return;
        }

        if(this._elsercurly_ == child)
        {
            this._elsercurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._boolid_ == oldChild)
        {
            setBoolid((PBoolid) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._iflcurly_ == oldChild)
        {
            setIflcurly((TLcurly) newChild);
            return;
        }

        if(this._ifBlockStmts_ == oldChild)
        {
            setIfBlockStmts((PStmtseq) newChild);
            return;
        }

        if(this._ifrcurly_ == oldChild)
        {
            setIfrcurly((TRcurly) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elselcurly_ == oldChild)
        {
            setElselcurly((TLcurly) newChild);
            return;
        }

        if(this._elseBlockStmts_ == oldChild)
        {
            setElseBlockStmts((PStmtseq) newChild);
            return;
        }

        if(this._elsercurly_ == oldChild)
        {
            setElsercurly((TRcurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
