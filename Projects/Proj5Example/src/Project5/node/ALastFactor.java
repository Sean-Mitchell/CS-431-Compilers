/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class ALastFactor extends PFactor
{
    private PArrayOrId _arrayOrId_;
    private TPeriod _period_;
    private TId _id_;
    private TLparen _lparen_;
    private PVarListTwo _varListTwo_;
    private TRparen _rparen_;

    public ALastFactor()
    {
        // Constructor
    }

    public ALastFactor(
        @SuppressWarnings("hiding") PArrayOrId _arrayOrId_,
        @SuppressWarnings("hiding") TPeriod _period_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PVarListTwo _varListTwo_,
        @SuppressWarnings("hiding") TRparen _rparen_)
    {
        // Constructor
        setArrayOrId(_arrayOrId_);

        setPeriod(_period_);

        setId(_id_);

        setLparen(_lparen_);

        setVarListTwo(_varListTwo_);

        setRparen(_rparen_);

    }

    @Override
    public Object clone()
    {
        return new ALastFactor(
            cloneNode(this._arrayOrId_),
            cloneNode(this._period_),
            cloneNode(this._id_),
            cloneNode(this._lparen_),
            cloneNode(this._varListTwo_),
            cloneNode(this._rparen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALastFactor(this);
    }

    public PArrayOrId getArrayOrId()
    {
        return this._arrayOrId_;
    }

    public void setArrayOrId(PArrayOrId node)
    {
        if(this._arrayOrId_ != null)
        {
            this._arrayOrId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayOrId_ = node;
    }

    public TPeriod getPeriod()
    {
        return this._period_;
    }

    public void setPeriod(TPeriod node)
    {
        if(this._period_ != null)
        {
            this._period_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._period_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PVarListTwo getVarListTwo()
    {
        return this._varListTwo_;
    }

    public void setVarListTwo(PVarListTwo node)
    {
        if(this._varListTwo_ != null)
        {
            this._varListTwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varListTwo_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arrayOrId_)
            + toString(this._period_)
            + toString(this._id_)
            + toString(this._lparen_)
            + toString(this._varListTwo_)
            + toString(this._rparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arrayOrId_ == child)
        {
            this._arrayOrId_ = null;
            return;
        }

        if(this._period_ == child)
        {
            this._period_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._varListTwo_ == child)
        {
            this._varListTwo_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arrayOrId_ == oldChild)
        {
            setArrayOrId((PArrayOrId) newChild);
            return;
        }

        if(this._period_ == oldChild)
        {
            setPeriod((TPeriod) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._varListTwo_ == oldChild)
        {
            setVarListTwo((PVarListTwo) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
