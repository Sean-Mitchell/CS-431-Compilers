/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.analysis;

import java.util.*;
import Project5.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassStmtsClassmethodstmts(AClassStmtsClassmethodstmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonClassmethodstmts(AEpsilonClassmethodstmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassDefClassmethodstmt(AClassDefClassmethodstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDeclClassmethodstmt(AMethodDeclClassmethodstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDeclClassmethodstmt(AVarDeclClassmethodstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodStmtsMethodstmtseqs(AMethodStmtsMethodstmtseqs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonMethodstmtseqs(AEpsilonMethodstmtseqs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDeclMethodstmtseq(AMethodDeclMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDeclMethodstmtseq(AVarDeclMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignEqualsMethodstmtseq(AAssignEqualsMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStringMethodstmtseq(AAssignStringMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintStmtMethodstmtseq(APrintStmtMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignReadInMethodstmtseq(AAssignReadInMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignIncMethodstmtseq(AAssignIncMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignDecMethodstmtseq(AAssignDecMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclObjectMethodstmtseq(ADeclObjectMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignBooleanMethodstmtseq(AAssignBooleanMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFirstStmtStmtseq(AFirstStmtStmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonStmtseq(AEpsilonStmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignExprStmt(AAssignExprStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStringStmt(AAssignStringStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDeclStmt(AVarDeclStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfBlockStmt(AIfBlockStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseBlockStmt(AIfElseBlockStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGetStmt(AGetStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPutStmt(APutStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrStmt(AIncrStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecrStmt(ADecrStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclObjectStmt(ADeclObjectStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallStmt(AMethodCallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallInClassStmt(AMethodCallInClassStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignBooleanStmt(AAssignBooleanStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchStmt(ASwitchStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnotherCaseCaseHelper(AAnotherCaseCaseHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonCaseHelper(AEpsilonCaseHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakBreakHelper(ABreakBreakHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonBreakHelper(AEpsilonBreakHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallMethodChainingOption(AMethodCallMethodChainingOption node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonMethodChainingOption(AEpsilonMethodChainingOption node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrForIncrStep(AIncrForIncrStep node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecrForIncrStep(ADecrForIncrStep node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentForIncrStep(AAssignmentForIncrStep node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForOptionalType(AForOptionalType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonForOptionalType(AEpsilonForOptionalType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreIdsMoreIds(AMoreIdsMoreIds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonMoreIds(AEpsilonMoreIds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreIdsVarlist(AMoreIdsVarlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonVarlist(AEpsilonVarlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayArrayOption(AArrayArrayOption node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonArrayOption(AEpsilonArrayOption node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreIdsMoreVarlist(AMoreIdsMoreVarlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonMoreVarlist(AEpsilonMoreVarlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarListVarListTwo(AVarListVarListTwo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonVarListTwo(AEpsilonVarListTwo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprOrBool(AExprOrBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolExprOrBool(ABoolExprOrBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreVarListTwo(AMoreVarListTwo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonMoreVarListTwo(AEpsilonMoreVarListTwo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprFactor(AExprFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegativeFactor(ANegativeFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntFactor(AIntFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealFactor(ARealFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayFactor(AArrayFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdvarlistFactor(AIdvarlistFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALastFactor(ALastFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayArrayOrId(AArrayArrayOrId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdArrayOrId(AIdArrayOrId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueBoolean(ATrueBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseBoolean(AFalseBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalBoolean(AConditionalBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanBoolid(ABooleanBoolid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdBoolid(AIdBoolid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAddop(APlusAddop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAddop(AMinusAddop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypesType(ATypesType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusop(TPlusop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNegop(TNegop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultop(TMultop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCond(TCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClassLit(TClassLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGet(TGet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPut(TPut node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPeriod(TPeriod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIncr(TIncr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDecr(TDecr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLbracket(TLbracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRbracket(TRbracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLcurly(TLcurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRcurly(TRcurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTypeDecl(TTypeDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnychars(TAnychars node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
